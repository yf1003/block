// Eazax-CCC 高斯模糊

CCEffect %{
  techniques:
  - passes:
    - vert: unlit-vs
      frag: unlit-fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        widthLength: { value : 500.0}
        heightLength: { value : 500.0}
}%


CCProgram unlit-vs %{
  precision highp float;

  #include <builtin/uniforms/cc-global>

  in vec3 a_position;
  in vec4 a_color;
 
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif
 
  void main () {
    gl_Position = cc_matViewProj * vec4(a_position, 1);
    v_color = a_color;

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif
  }
}%


CCProgram unlit-fs %{
  precision highp float;

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D mainTexture;
  #endif

  uniform widthArea {
		float widthLength;
	};

  uniform heightArea {
		float heightLength;
	};
  
  // 模糊半径
  // for 循环的次数必须为常量
  const float RADIUS = 20.0;

  // 获取模糊颜色
  vec4 getBlurColor (vec2 pos) {
    vec4 color = vec4(0); // 初始颜色
    float sum = 0.0; // 总权重
    // 卷积过程
    for (float r = -RADIUS; r <= RADIUS; r++) { // 水平方向
      for (float c = -RADIUS; c <= RADIUS; c++) { // 垂直方向
        vec2 target = pos + vec2(r / widthLength, c / heightLength); // 目标像素位置
        float weight = (RADIUS - abs(r)) * (RADIUS - abs(c)); // 计算权重
        color += texture2D(mainTexture, target) * weight; // 累加颜色
        sum += weight; // 累加权重
      }
    }
    color /= sum; // 求出平均值
    return color;
  }
 
  void main () {
    vec4 color = getBlurColor(v_uv0); // 获取模糊后的颜色
    color.a = v_color.a; // 还原透明度
    gl_FragColor = color;
  }
}%