"use strict";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.unload=exports.load=exports.methods=void 0;const t=e(require("fs"));let a,n;exports.methods={getLangConfigData:()=>a};async function s(){if(n=await Editor.Profile.getConfig("playable-config","langConfigPath"),null==n||""==n)return console.warn("get langConfigPath failed!",n);const e="project://";n.startsWith(e)&&(n=n.substring(10)),r(n),Editor.Message.addBroadcastListener("asset-db:asset-change",o)}function o(e,t){t.source.endsWith(n)&&r(n)}exports.load=async function(){await Editor.Message.request("asset-db","query-ready")?s():Editor.Message.addBroadcastListener("asset-db:ready",s)};function r(e){var s,o;const r=Editor.Utils.Path.join(Editor.Project.path,n);if(!t.default.existsSync(r))return;let i,l=t.default.readFileSync(r,{encoding:"utf8"});try{i=JSON.parse(l)}catch(e){return console.warn(e)}a={};let d=Object.keys(i.languages);if(0==d.length)return;let u=null!==(o=null!==(s=i.languages["zh-cn"])&&void 0!==s?s:i.languages.en)&&void 0!==o?o:i.languages[d[0]];Object.assign(a,u),console.log("langConfigData",e,Object.keys(a))}exports.unload=function(){};