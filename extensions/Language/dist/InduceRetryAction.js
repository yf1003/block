"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("./prop"),t={$:{induceLabel:".induce-label",induceSelect:".induce-select",uninduceLabel:".uninduce-label",uninduceSelect:".uninduce-select",displayTypeLabel:".displayType-label",displayTypeSelect:".displayType-select"},template:'\n        <ui-prop>\n            <ui-label slot="label" class="induce-label"></ui-label>\n            <ui-select slot="content" class="induce-select"></ui-select>\n        </ui-prop>\n        <ui-prop>\n            <ui-label slot="label" class="uninduce-label"></ui-label>\n            <ui-select slot="content" class="uninduce-select"></ui-select>\n        </ui-prop>\n        <ui-prop>\n            <ui-label slot="label" class="displayType-label"></ui-label>\n            <ui-select slot="content" class="displayType-select"></ui-select>\n        </ui-prop>\n    ',methods:{},async update(t){const l=t.value,i=await Editor.Message.request("language","getLangConfigData");let u="";for(const e of Object.keys(i))u+=`<option value="${e}">${e}</option>`;this.$.induceLabel.setAttribute("value",(0,e.getName)(l.induceKeyText)),this.$.induceLabel.setAttribute("tooltip",l.induceKeyText.tooltip),this.$.induceSelect.innerHTML=u,this.$.induceSelect.value=l.induceKeyText.value,this.$.induceSelect.addEventListener("change",(e=>{l.induceKeyText.value=e.target.value;const i={uuid:t.value.node.value.uuid,path:t.path,dump:t};Editor.Message.send("scene","set-property",i)})),this.$.uninduceLabel.setAttribute("value",(0,e.getName)(l.uninduceKeyText)),this.$.uninduceLabel.setAttribute("tooltip",l.uninduceKeyText.tooltip),this.$.uninduceSelect.innerHTML=u,this.$.uninduceSelect.value=l.uninduceKeyText.value,this.$.uninduceSelect.addEventListener("change",(e=>{l.uninduceKeyText.value=e.target.value;const i={uuid:t.value.node.value.uuid,path:t.path,dump:t};Editor.Message.send("scene","set-property",i)})),this.$.displayTypeLabel.setAttribute("value",(0,e.getName)(l.displayType)),this.$.displayTypeLabel.setAttribute("tooltip",l.displayType.tooltip);let n="";const a=l.displayType.enumList;for(let e=0;e<a.length;e++){const t=a[e];n+=`<option value="${t.value}">${t.name}</option>`}this.$.displayTypeSelect.innerHTML=n,this.$.displayTypeSelect.value=l.displayType.value,this.$.displayTypeSelect.addEventListener("change",(e=>{l.displayType.value=e.target.value;const i={uuid:t.value.node.value.uuid,path:t.path,dump:t};Editor.Message.send("scene","set-property",i)}))},ready(){},close(){}};module.exports=Editor.Panel.define(t);